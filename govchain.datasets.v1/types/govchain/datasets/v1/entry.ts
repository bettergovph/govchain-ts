// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: govchain/datasets/v1/entry.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "govchain.datasets.v1";

/** Entry defines the Entry message. */
export interface Entry {
  id: Long;
  title: string;
  description: string;
  ipfsCid: string;
  mimeType: string;
  fileName: string;
  fileUrl: string;
  fallbackUrl: string;
  fileSize: string;
  checksumSha256: string;
  agency: string;
  category: string;
  submitter: string;
  timestamp: string;
  pinCount: string;
  creator: string;
}

function createBaseEntry(): Entry {
  return {
    id: Long.UZERO,
    title: "",
    description: "",
    ipfsCid: "",
    mimeType: "",
    fileName: "",
    fileUrl: "",
    fallbackUrl: "",
    fileSize: "",
    checksumSha256: "",
    agency: "",
    category: "",
    submitter: "",
    timestamp: "",
    pinCount: "",
    creator: "",
  };
}

export const Entry: MessageFns<Entry> = {
  encode(message: Entry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id.toString());
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.ipfsCid !== "") {
      writer.uint32(34).string(message.ipfsCid);
    }
    if (message.mimeType !== "") {
      writer.uint32(42).string(message.mimeType);
    }
    if (message.fileName !== "") {
      writer.uint32(50).string(message.fileName);
    }
    if (message.fileUrl !== "") {
      writer.uint32(58).string(message.fileUrl);
    }
    if (message.fallbackUrl !== "") {
      writer.uint32(66).string(message.fallbackUrl);
    }
    if (message.fileSize !== "") {
      writer.uint32(74).string(message.fileSize);
    }
    if (message.checksumSha256 !== "") {
      writer.uint32(82).string(message.checksumSha256);
    }
    if (message.agency !== "") {
      writer.uint32(90).string(message.agency);
    }
    if (message.category !== "") {
      writer.uint32(98).string(message.category);
    }
    if (message.submitter !== "") {
      writer.uint32(106).string(message.submitter);
    }
    if (message.timestamp !== "") {
      writer.uint32(114).string(message.timestamp);
    }
    if (message.pinCount !== "") {
      writer.uint32(122).string(message.pinCount);
    }
    if (message.creator !== "") {
      writer.uint32(130).string(message.creator);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Entry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.ipfsCid = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.fileName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.fileUrl = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.fallbackUrl = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.fileSize = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.checksumSha256 = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.agency = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.category = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.submitter = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.timestamp = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.pinCount = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Entry {
    return {
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      ipfsCid: isSet(object.ipfsCid) ? globalThis.String(object.ipfsCid) : "",
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
      fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
      fileUrl: isSet(object.fileUrl) ? globalThis.String(object.fileUrl) : "",
      fallbackUrl: isSet(object.fallbackUrl) ? globalThis.String(object.fallbackUrl) : "",
      fileSize: isSet(object.fileSize) ? globalThis.String(object.fileSize) : "",
      checksumSha256: isSet(object.checksumSha256) ? globalThis.String(object.checksumSha256) : "",
      agency: isSet(object.agency) ? globalThis.String(object.agency) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      submitter: isSet(object.submitter) ? globalThis.String(object.submitter) : "",
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
      pinCount: isSet(object.pinCount) ? globalThis.String(object.pinCount) : "",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: Entry): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.ipfsCid !== "") {
      obj.ipfsCid = message.ipfsCid;
    }
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    if (message.fileName !== "") {
      obj.fileName = message.fileName;
    }
    if (message.fileUrl !== "") {
      obj.fileUrl = message.fileUrl;
    }
    if (message.fallbackUrl !== "") {
      obj.fallbackUrl = message.fallbackUrl;
    }
    if (message.fileSize !== "") {
      obj.fileSize = message.fileSize;
    }
    if (message.checksumSha256 !== "") {
      obj.checksumSha256 = message.checksumSha256;
    }
    if (message.agency !== "") {
      obj.agency = message.agency;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.submitter !== "") {
      obj.submitter = message.submitter;
    }
    if (message.timestamp !== "") {
      obj.timestamp = message.timestamp;
    }
    if (message.pinCount !== "") {
      obj.pinCount = message.pinCount;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Entry>, I>>(base?: I): Entry {
    return Entry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Entry>, I>>(object: I): Entry {
    const message = createBaseEntry();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.ipfsCid = object.ipfsCid ?? "";
    message.mimeType = object.mimeType ?? "";
    message.fileName = object.fileName ?? "";
    message.fileUrl = object.fileUrl ?? "";
    message.fallbackUrl = object.fallbackUrl ?? "";
    message.fileSize = object.fileSize ?? "";
    message.checksumSha256 = object.checksumSha256 ?? "";
    message.agency = object.agency ?? "";
    message.category = object.category ?? "";
    message.submitter = object.submitter ?? "";
    message.timestamp = object.timestamp ?? "";
    message.pinCount = object.pinCount ?? "";
    message.creator = object.creator ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
