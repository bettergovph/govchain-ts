// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: govchain/datasets/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Entry } from "./entry";
import { Params } from "./params";

export const protobufPackage = "govchain.datasets.v1";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params?: Params | undefined;
}

/** QueryGetEntryRequest defines the QueryGetEntryRequest message. */
export interface QueryGetEntryRequest {
  id: Long;
}

/** QueryGetEntryResponse defines the QueryGetEntryResponse message. */
export interface QueryGetEntryResponse {
  entry?: Entry | undefined;
}

/** QueryAllEntryRequest defines the QueryAllEntryRequest message. */
export interface QueryAllEntryRequest {
  pagination?: PageRequest | undefined;
}

/** QueryAllEntryResponse defines the QueryAllEntryResponse message. */
export interface QueryAllEntryResponse {
  entry: Entry[];
  pagination?: PageResponse | undefined;
}

/** QueryEntriesByAgencyRequest defines the QueryEntriesByAgencyRequest message. */
export interface QueryEntriesByAgencyRequest {
  agency: string;
}

/** QueryEntriesByAgencyResponse defines the QueryEntriesByAgencyResponse message. */
export interface QueryEntriesByAgencyResponse {
}

/** QueryEntriesByCategoryRequest defines the QueryEntriesByCategoryRequest message. */
export interface QueryEntriesByCategoryRequest {
  category: string;
}

/** QueryEntriesByCategoryResponse defines the QueryEntriesByCategoryResponse message. */
export interface QueryEntriesByCategoryResponse {
}

/** QueryEntriesByMimetypeRequest defines the QueryEntriesByMimetypeRequest message. */
export interface QueryEntriesByMimetypeRequest {
  mimeType: string;
}

/** QueryEntriesByMimetypeResponse defines the QueryEntriesByMimetypeResponse message. */
export interface QueryEntriesByMimetypeResponse {
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryGetEntryRequest(): QueryGetEntryRequest {
  return { id: Long.UZERO };
}

export const QueryGetEntryRequest: MessageFns<QueryGetEntryRequest> = {
  encode(message: QueryGetEntryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetEntryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetEntryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetEntryRequest {
    return { id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO };
  },

  toJSON(message: QueryGetEntryRequest): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetEntryRequest>, I>>(base?: I): QueryGetEntryRequest {
    return QueryGetEntryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetEntryRequest>, I>>(object: I): QueryGetEntryRequest {
    const message = createBaseQueryGetEntryRequest();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    return message;
  },
};

function createBaseQueryGetEntryResponse(): QueryGetEntryResponse {
  return { entry: undefined };
}

export const QueryGetEntryResponse: MessageFns<QueryGetEntryResponse> = {
  encode(message: QueryGetEntryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entry !== undefined) {
      Entry.encode(message.entry, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetEntryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetEntryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entry = Entry.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetEntryResponse {
    return { entry: isSet(object.entry) ? Entry.fromJSON(object.entry) : undefined };
  },

  toJSON(message: QueryGetEntryResponse): unknown {
    const obj: any = {};
    if (message.entry !== undefined) {
      obj.entry = Entry.toJSON(message.entry);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetEntryResponse>, I>>(base?: I): QueryGetEntryResponse {
    return QueryGetEntryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetEntryResponse>, I>>(object: I): QueryGetEntryResponse {
    const message = createBaseQueryGetEntryResponse();
    message.entry = (object.entry !== undefined && object.entry !== null) ? Entry.fromPartial(object.entry) : undefined;
    return message;
  },
};

function createBaseQueryAllEntryRequest(): QueryAllEntryRequest {
  return { pagination: undefined };
}

export const QueryAllEntryRequest: MessageFns<QueryAllEntryRequest> = {
  encode(message: QueryAllEntryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllEntryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllEntryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllEntryRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllEntryRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllEntryRequest>, I>>(base?: I): QueryAllEntryRequest {
    return QueryAllEntryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllEntryRequest>, I>>(object: I): QueryAllEntryRequest {
    const message = createBaseQueryAllEntryRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllEntryResponse(): QueryAllEntryResponse {
  return { entry: [], pagination: undefined };
}

export const QueryAllEntryResponse: MessageFns<QueryAllEntryResponse> = {
  encode(message: QueryAllEntryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entry) {
      Entry.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllEntryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllEntryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entry.push(Entry.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllEntryResponse {
    return {
      entry: globalThis.Array.isArray(object?.entry) ? object.entry.map((e: any) => Entry.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllEntryResponse): unknown {
    const obj: any = {};
    if (message.entry?.length) {
      obj.entry = message.entry.map((e) => Entry.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllEntryResponse>, I>>(base?: I): QueryAllEntryResponse {
    return QueryAllEntryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllEntryResponse>, I>>(object: I): QueryAllEntryResponse {
    const message = createBaseQueryAllEntryResponse();
    message.entry = object.entry?.map((e) => Entry.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryEntriesByAgencyRequest(): QueryEntriesByAgencyRequest {
  return { agency: "" };
}

export const QueryEntriesByAgencyRequest: MessageFns<QueryEntriesByAgencyRequest> = {
  encode(message: QueryEntriesByAgencyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agency !== "") {
      writer.uint32(10).string(message.agency);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryEntriesByAgencyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryEntriesByAgencyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.agency = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryEntriesByAgencyRequest {
    return { agency: isSet(object.agency) ? globalThis.String(object.agency) : "" };
  },

  toJSON(message: QueryEntriesByAgencyRequest): unknown {
    const obj: any = {};
    if (message.agency !== "") {
      obj.agency = message.agency;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryEntriesByAgencyRequest>, I>>(base?: I): QueryEntriesByAgencyRequest {
    return QueryEntriesByAgencyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryEntriesByAgencyRequest>, I>>(object: I): QueryEntriesByAgencyRequest {
    const message = createBaseQueryEntriesByAgencyRequest();
    message.agency = object.agency ?? "";
    return message;
  },
};

function createBaseQueryEntriesByAgencyResponse(): QueryEntriesByAgencyResponse {
  return {};
}

export const QueryEntriesByAgencyResponse: MessageFns<QueryEntriesByAgencyResponse> = {
  encode(_: QueryEntriesByAgencyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryEntriesByAgencyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryEntriesByAgencyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryEntriesByAgencyResponse {
    return {};
  },

  toJSON(_: QueryEntriesByAgencyResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryEntriesByAgencyResponse>, I>>(base?: I): QueryEntriesByAgencyResponse {
    return QueryEntriesByAgencyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryEntriesByAgencyResponse>, I>>(_: I): QueryEntriesByAgencyResponse {
    const message = createBaseQueryEntriesByAgencyResponse();
    return message;
  },
};

function createBaseQueryEntriesByCategoryRequest(): QueryEntriesByCategoryRequest {
  return { category: "" };
}

export const QueryEntriesByCategoryRequest: MessageFns<QueryEntriesByCategoryRequest> = {
  encode(message: QueryEntriesByCategoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.category !== "") {
      writer.uint32(10).string(message.category);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryEntriesByCategoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryEntriesByCategoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.category = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryEntriesByCategoryRequest {
    return { category: isSet(object.category) ? globalThis.String(object.category) : "" };
  },

  toJSON(message: QueryEntriesByCategoryRequest): unknown {
    const obj: any = {};
    if (message.category !== "") {
      obj.category = message.category;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryEntriesByCategoryRequest>, I>>(base?: I): QueryEntriesByCategoryRequest {
    return QueryEntriesByCategoryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryEntriesByCategoryRequest>, I>>(
    object: I,
  ): QueryEntriesByCategoryRequest {
    const message = createBaseQueryEntriesByCategoryRequest();
    message.category = object.category ?? "";
    return message;
  },
};

function createBaseQueryEntriesByCategoryResponse(): QueryEntriesByCategoryResponse {
  return {};
}

export const QueryEntriesByCategoryResponse: MessageFns<QueryEntriesByCategoryResponse> = {
  encode(_: QueryEntriesByCategoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryEntriesByCategoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryEntriesByCategoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryEntriesByCategoryResponse {
    return {};
  },

  toJSON(_: QueryEntriesByCategoryResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryEntriesByCategoryResponse>, I>>(base?: I): QueryEntriesByCategoryResponse {
    return QueryEntriesByCategoryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryEntriesByCategoryResponse>, I>>(_: I): QueryEntriesByCategoryResponse {
    const message = createBaseQueryEntriesByCategoryResponse();
    return message;
  },
};

function createBaseQueryEntriesByMimetypeRequest(): QueryEntriesByMimetypeRequest {
  return { mimeType: "" };
}

export const QueryEntriesByMimetypeRequest: MessageFns<QueryEntriesByMimetypeRequest> = {
  encode(message: QueryEntriesByMimetypeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mimeType !== "") {
      writer.uint32(10).string(message.mimeType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryEntriesByMimetypeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryEntriesByMimetypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryEntriesByMimetypeRequest {
    return { mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "" };
  },

  toJSON(message: QueryEntriesByMimetypeRequest): unknown {
    const obj: any = {};
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryEntriesByMimetypeRequest>, I>>(base?: I): QueryEntriesByMimetypeRequest {
    return QueryEntriesByMimetypeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryEntriesByMimetypeRequest>, I>>(
    object: I,
  ): QueryEntriesByMimetypeRequest {
    const message = createBaseQueryEntriesByMimetypeRequest();
    message.mimeType = object.mimeType ?? "";
    return message;
  },
};

function createBaseQueryEntriesByMimetypeResponse(): QueryEntriesByMimetypeResponse {
  return {};
}

export const QueryEntriesByMimetypeResponse: MessageFns<QueryEntriesByMimetypeResponse> = {
  encode(_: QueryEntriesByMimetypeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryEntriesByMimetypeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryEntriesByMimetypeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryEntriesByMimetypeResponse {
    return {};
  },

  toJSON(_: QueryEntriesByMimetypeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryEntriesByMimetypeResponse>, I>>(base?: I): QueryEntriesByMimetypeResponse {
    return QueryEntriesByMimetypeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryEntriesByMimetypeResponse>, I>>(_: I): QueryEntriesByMimetypeResponse {
    const message = createBaseQueryEntriesByMimetypeResponse();
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** ListEntry Queries a list of Entry items. */
  GetEntry(request: QueryGetEntryRequest): Promise<QueryGetEntryResponse>;
  /** ListEntry defines the ListEntry RPC. */
  ListEntry(request: QueryAllEntryRequest): Promise<QueryAllEntryResponse>;
  /** EntriesByAgency Queries a list of EntriesByAgency items. */
  EntriesByAgency(request: QueryEntriesByAgencyRequest): Promise<QueryEntriesByAgencyResponse>;
  /** EntriesByCategory Queries a list of EntriesByCategory items. */
  EntriesByCategory(request: QueryEntriesByCategoryRequest): Promise<QueryEntriesByCategoryResponse>;
  /** EntriesByMimetype Queries a list of EntriesByMimetype items. */
  EntriesByMimetype(request: QueryEntriesByMimetypeRequest): Promise<QueryEntriesByMimetypeResponse>;
}

export const QueryServiceName = "govchain.datasets.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.GetEntry = this.GetEntry.bind(this);
    this.ListEntry = this.ListEntry.bind(this);
    this.EntriesByAgency = this.EntriesByAgency.bind(this);
    this.EntriesByCategory = this.EntriesByCategory.bind(this);
    this.EntriesByMimetype = this.EntriesByMimetype.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  GetEntry(request: QueryGetEntryRequest): Promise<QueryGetEntryResponse> {
    const data = QueryGetEntryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetEntry", data);
    return promise.then((data) => QueryGetEntryResponse.decode(new BinaryReader(data)));
  }

  ListEntry(request: QueryAllEntryRequest): Promise<QueryAllEntryResponse> {
    const data = QueryAllEntryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListEntry", data);
    return promise.then((data) => QueryAllEntryResponse.decode(new BinaryReader(data)));
  }

  EntriesByAgency(request: QueryEntriesByAgencyRequest): Promise<QueryEntriesByAgencyResponse> {
    const data = QueryEntriesByAgencyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "EntriesByAgency", data);
    return promise.then((data) => QueryEntriesByAgencyResponse.decode(new BinaryReader(data)));
  }

  EntriesByCategory(request: QueryEntriesByCategoryRequest): Promise<QueryEntriesByCategoryResponse> {
    const data = QueryEntriesByCategoryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "EntriesByCategory", data);
    return promise.then((data) => QueryEntriesByCategoryResponse.decode(new BinaryReader(data)));
  }

  EntriesByMimetype(request: QueryEntriesByMimetypeRequest): Promise<QueryEntriesByMimetypeResponse> {
    const data = QueryEntriesByMimetypeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "EntriesByMimetype", data);
    return promise.then((data) => QueryEntriesByMimetypeResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
