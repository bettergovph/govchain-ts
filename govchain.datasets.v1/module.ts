// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgUpdateParams } from "./types/govchain/datasets/v1/tx";
import { MsgCreateEntry } from "./types/govchain/datasets/v1/tx";
import { MsgUpdateEntry } from "./types/govchain/datasets/v1/tx";
import { MsgDeleteEntry } from "./types/govchain/datasets/v1/tx";

import { Entry as typeEntry } from "./types"
import { Params as typeParams } from "./types"

export { MsgUpdateParams, MsgCreateEntry, MsgUpdateEntry, MsgDeleteEntry };

type sendMsgUpdateParamsParams = {
	value: MsgUpdateParams,
	fee?: StdFee,
	memo?: string
};

type sendMsgCreateEntryParams = {
	value: MsgCreateEntry,
	fee?: StdFee,
	memo?: string
};

type sendMsgUpdateEntryParams = {
	value: MsgUpdateEntry,
	fee?: StdFee,
	memo?: string
};

type sendMsgDeleteEntryParams = {
	value: MsgDeleteEntry,
	fee?: StdFee,
	memo?: string
};


type msgUpdateParamsParams = {
	value: MsgUpdateParams,
};

type msgCreateEntryParams = {
	value: MsgCreateEntry,
};

type msgUpdateEntryParams = {
	value: MsgUpdateEntry,
};

type msgDeleteEntryParams = {
	value: MsgDeleteEntry,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: { fields: Field[] } = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
	amount: [],
	gas: "200000",
};

interface TxClientOptions {
	addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

	return {

		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
				throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {
				const { address } = (await signer.getAccounts())[0];
				const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: ' + e.message)
			}
		},

		async sendMsgCreateEntry({ value, fee, memo }: sendMsgCreateEntryParams): Promise<DeliverTxResponse> {
			if (!signer) {
				throw new Error('TxClient:sendMsgCreateEntry: Unable to sign Tx. Signer is not present.')
			}
			try {
				const { address } = (await signer.getAccounts())[0];
				const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
				let msg = this.msgCreateEntry({ value: MsgCreateEntry.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateEntry: Could not broadcast Tx: ' + e.message)
			}
		},

		async sendMsgUpdateEntry({ value, fee, memo }: sendMsgUpdateEntryParams): Promise<DeliverTxResponse> {
			if (!signer) {
				throw new Error('TxClient:sendMsgUpdateEntry: Unable to sign Tx. Signer is not present.')
			}
			try {
				const { address } = (await signer.getAccounts())[0];
				const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
				let msg = this.msgUpdateEntry({ value: MsgUpdateEntry.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateEntry: Could not broadcast Tx: ' + e.message)
			}
		},

		async sendMsgDeleteEntry({ value, fee, memo }: sendMsgDeleteEntryParams): Promise<DeliverTxResponse> {
			if (!signer) {
				throw new Error('TxClient:sendMsgDeleteEntry: Unable to sign Tx. Signer is not present.')
			}
			try {
				const { address } = (await signer.getAccounts())[0];
				const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
				let msg = this.msgDeleteEntry({ value: MsgDeleteEntry.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteEntry: Could not broadcast Tx: ' + e.message)
			}
		},


		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/govchain.datasets.v1.MsgUpdateParams", value: MsgUpdateParams.fromPartial(value) }
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},

		msgCreateEntry({ value }: msgCreateEntryParams): EncodeObject {
			try {
				return { typeUrl: "/govchain.datasets.v1.MsgCreateEntry", value: MsgCreateEntry.fromPartial(value) }
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateEntry: Could not create message: ' + e.message)
			}
		},

		msgUpdateEntry({ value }: msgUpdateEntryParams): EncodeObject {
			try {
				return { typeUrl: "/govchain.datasets.v1.MsgUpdateEntry", value: MsgUpdateEntry.fromPartial(value) }
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateEntry: Could not create message: ' + e.message)
			}
		},

		msgDeleteEntry({ value }: msgDeleteEntryParams): EncodeObject {
			try {
				return { typeUrl: "/govchain.datasets.v1.MsgDeleteEntry", value: MsgDeleteEntry.fromPartial(value) }
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteEntry: Could not create message: ' + e.message)
			}
		},

	}
};

interface QueryClientOptions {
	addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
	return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string, unknown>;
	public registry: Array<[string, any]> = [];

	constructor(client: IgniteClient) {

		this.query = queryClient({ addr: client.env.apiURL });
		this.updateTX(client);
		this.structure = {
			Entry: getStructure(typeEntry.fromPartial({})),
			Params: getStructure(typeParams.fromPartial({})),

		};
		client.on('signer-changed', (signer) => {
			this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
		const methods = txClient({
			signer: client.signer,
			addr: client.env.rpcURL,
			prefix: client.env.prefix ?? "cosmos",
		})

		this.tx = methods;
		for (let m in methods) {
			this.tx[m] = methods[m].bind(this.tx);
		}
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			GovchainDatasetsV_1: new SDKModule(test)
		},
		registry: msgTypes
	}
}
export default IgntModule;